
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.Line2D;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.text.html.HTMLDocument;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ahmed
 */
public class ParseTree extends javax.swing.JFrame {

    /**
     * Creates new form ParseTree
     */
    public ParseTree() {
        initComponents();
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        //i have created spicieal class for jPanel called panel1
        jPanel1 = new JPanel();
        drawbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1770, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1116, Short.MAX_VALUE)
        );

        jScrollPane.setViewportView(jPanel1);

        drawbtn.setText("Draw");
        drawbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(drawbtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1598, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(drawbtn)
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>                        
int flg =0;
    private void drawbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawbtnActionPerformed
        // TODO add your handling code here:
       if (flg==0){Draw(root ,50 , 25); flg =1;}
       
    }//GEN-LAST:event_drawbtnActionPerformed
    
    /**
     * @param args the command line arguments
     */
     static TreeNode root = new TreeNode();
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParseTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParseTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParseTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParseTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ParseTree().setVisible(true);
            }
        });
        Scanner scanner = new Scanner("tiny_sample_code.txt", "scanner_output.txt");
        scanner.clearOutFile();
        scanner.readfile();
        scanner.scan();
        
        Parser parser = new Parser("scanner_output.txt" , "parser_output.txt");
 
        parser.clearOutFile();
        parser.readFile();
        root = parser.Program();
        
        
    }
    LinkedList<Line2D> xy=new LinkedList<Line2D>();
    public void Draw(TreeNode root , int x , int y)
    {
        int cx = x;
        int cy = y;
        int lx =0;
        int ly = 0;
        LinkedList<TreeNode> nodes = new LinkedList<TreeNode>();
        nodes = getbreadthfrist(root);
        
                       int j = 0;
        Iterator i = nodes.iterator();
        TreeNode cur_node = new TreeNode();
        TreeNode last_node = new TreeNode();
        while (i.hasNext()) {
            cur_node = (TreeNode) i.next();
                    
            if (!cur_node.getName().equals("null") && !cur_node.getName().equals("flg")) {
//               int anything = (int) (cur_node.getX()*.7 + cur_node.getParentcox());
//                xy.addLast(new Line2D.Float(anything,
//                        cur_node.getY() , cur_node.getParent().getX(),cur_node.getParent().getY()));
                if (cur_node.isTerminal()) {
                    drawbtn(cur_node.getName(), (int) (cur_node.getX()*.7 + cur_node.getParentcox()), cur_node.getY(), 1);
                } else {
                    drawbtn(cur_node.getName(), (int) (cur_node.getX()*.7 + cur_node.getParentcox()), cur_node.getY(), 0);
                }

            }

        }
        
        jPanel1.getParent().revalidate();
        jPanel1.getParent().repaint();
    jScrollPane.getParent().repaint();
    }
 void drawbtn(String ss,int x , int y , int flg)
    {
          JButton k = new JButton(ss);
        k.setFont(new Font(k.getFont().getName(), k.getFont().getStyle(), 14));
        k.setSize(100, 60);
        k.setLocation(x, y);
        if(flg==0)
            k.setBackground(Color.GRAY);
        else
            k.setBackground(Color.GREEN);

        k.setForeground(Color.BLACK);
        k.setOpaque(true);
        jPanel1.add(k);
        
    }
     
   LinkedList<TreeNode> getbreadthfrist (TreeNode root)
   {
       
        LinkedList<TreeNode> q = new LinkedList<TreeNode>();
        LinkedList<TreeNode> nodes = new LinkedList<TreeNode>();
        
        q.addLast(root);
        Iterator i = q.iterator();
        
        TreeNode cur_node = new TreeNode();
        TreeNode Last_node  = new TreeNode();
        cur_node = q.poll();
        Iterator i4 = cur_node.getChildren().iterator();
        while(i4.hasNext())
             {  
                 TreeNode t = new TreeNode();  t = (TreeNode) i4.next();
                 t.setParent(cur_node);
                 q.addLast(t);
                 if(t.isTerminal())
                     break;
             }
        q.addLast((new TreeNode("flg")));
        
        while (i.hasNext())
        {
             cur_node = q.poll();
            
             nodes.addLast(cur_node);
             Iterator i2 = cur_node.getChildren().iterator();
//             boolean createflg = false;
             
             TreeNode flg = new TreeNode("flg");
             while(i2.hasNext())
             {  
                 TreeNode t = new TreeNode();  t = (TreeNode) i2.next();
//                 t.setName(t.getName() + "-->" + cur_node.getName());
                 t.setParent(cur_node);
                 q.addLast(t);
                 if(t.isTerminal())
                     break;
//                 createflg= true;
 
             }
             
//             if(createflg)
                if(cur_node.getName().equals("flg"))
                { 
                    q.add(flg);
                    if(Last_node.getName().equals("flg"))
                        break;
                
                }
                Last_node = cur_node;
                            
        }
        
        LinkedList<TreeNode> nodess = new LinkedList<TreeNode>();
        Iterator i3 = nodes.iterator();
        TreeNode mem = new TreeNode();
        int x = 25 ; int y = 25 ;
        while(i3.hasNext())
        {
            TreeNode t  = new TreeNode();
            t = (TreeNode) i3.next();
            
            if(!t.getName().equals("null"))
            {
                t.setY(y);
                t.setX(x);
                x+=200;
                nodess.addLast(t);
                if(t.getName().equals("flg") && !mem.getName().equals("flg"))
                {
                    x=25;
                    y=y+70;
                }
            }
            mem = t;
        }
        return nodess;
   }
    
           
                    
 
        /*
//        jScrollPane.removeAll();
        jScrollPane.setAutoscrolls(true);
        
//        int noNodes = root.Count();
        JButton jj=new JButton();
        
        
        LinkedList<TreeNode> l = new LinkedList<TreeNode>();
        JButton[] k = new JButton[100];
        l = root.getChildren();
        Iterator i = l.iterator();
        int j=0;
//        x+=20; y+=20;
        if(l.isEmpty())
        {
            return;
        
        }
        if(!l.isEmpty())
        while (i.hasNext())
        {
            TreeNode temp = (TreeNode) i.next();
            k[j] = new JButton(temp.getName());
            k[j].setFont(new Font(jj.getFont().getName(), jj.getFont().getStyle(), 14));
            k[j].setSize(100,60);
            k[j].setLocation(x , y);
            k[j].setBackground(Color.GRAY);
            k[j].setForeground(Color.BLACK);
            k[j].setOpaque(true);
            if(!temp.getName().equals("null"))
            {
                
                xy.add(x);
                xy.add(y);

                jPanel1.add(k[j]);
            }
            Draw(temp , x , y+100);
            xy.add(x);
            xy.add(y);
            xy.add(x);
            xy.add(y+100);
            j++;
            x+=200;
            
        } 
      */
        
        
        
//        
//        jj.setText("1234567");
//        jj.setFont(new Font(jj.getFont().getName(), jj.getFont().getStyle(), 14));
//        jj.setSize(80,70);
//        jj.setLocation(10, 20);
//        jj.setBackground(Color.GRAY);
//        jj.setForeground(Color.BLACK);
//        jj.setOpaque(true);
//        jScrollPane.add(jj);
//        jScrollPane.updateUI(); 
//        jScrollPane.getParent().revalidate();
//        jScrollPane.getParent().repaint();
       
    
    // how to draw a line :D 
   
    public void Paint(Graphics g) {
     super.paint(g);
     g.fillRect(25, 30, 25, 55);
     Draw(root,25,25);
     jPanel1.updateUI();
        jScrollPane.setViewportView(jPanel1);
        jPanel1.getParent().revalidate();
        jPanel1.getParent().repaint();
        
        Iterator i = xy.iterator();
       
        
        while (i.hasNext())
        {
            Graphics2D g2 = (Graphics2D) g;
        Line2D lin = (Line2D) i.next();
        g2.draw(lin);
             }
        }

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton drawbtn;
    javax.swing.JPanel jPanel1;
    javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables
/*
class Panel1 extends JPanel {

    
        Panel1() {
            // set a preferred size for the custom panel.
//            setPreferredSize(new Dimension(420,420));
            
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            Draw(root,25,25);
     jPanel1.updateUI();
        jScrollPane.setViewportView(jPanel1);
        jPanel1.getParent().revalidate();
        jPanel1.getParent().repaint();
        
        /*Iterator i = xy.iterator();
       
        int x1,x2,y1,y2;
        while (i.hasNext())
        {
             x1 = (int) i.next();
             y1 = (int) i.next();
             
             if(i.hasNext())
             {
             x2 = (int) i.next();
             y2 = (int) i.next();
           
            Graphics2D g2 = (Graphics2D) g;
        Line2D lin = new Line2D.Float(x1+50, y1+30, x2+50, y2+30);
        g2.draw(lin);
             }
        }*/
//            g.drawString("BLAH", 20, 20);
//            g.drawRect(200, 200, 200, 200);
        /*}
        
        
        
        
    LinkedList xy=new LinkedList();
    public void Draw(TreeNode root , int x , int y)
    {
        LinkedList<TreeNode> nodes = new LinkedList<TreeNode>();
        nodes = getbreadthfrist(root);
        
                JButton[] k = new JButton[100];
                int j =0;
                Iterator i = nodes.iterator();
                TreeNode cur_node = new TreeNode();
                TreeNode last_node = new TreeNode();
                while(i.hasNext())
                {
                    cur_node = (TreeNode) i.next();
                    System.out.println(cur_node.getName());
//                    if(cur_node.getName().equals("flg") && !last_node.getName().equals("flg"))
                    {
//                        y += 60;
//                        x = 50 ;
                    }
                    
               if(!cur_node.getName().equals("null") && !cur_node.getName().equals("flg"))
               {    
                    drawbtn(cur_node.getName(),x+=200,y);
               }
               last_node = cur_node;
                }
        
    }


}*/   
   }
